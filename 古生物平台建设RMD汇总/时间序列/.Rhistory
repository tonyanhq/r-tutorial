knitr::opts_chunk$set(echo = TRUE)
data(EuStockMarkets)#加载EuStockMarkets数据集
data=EuStockMarkets#为简化书写，将数据集重新命名为data
dim(data)#获取数据维度
head(data)#显示数据集前6条数据信息
data=data[1:900,]
is.ts(data)
ts(data,start=c(1991,130),end=c(1991,))
data(EuStockMarkets)#加载EuStockMarkets数据集
data=EuStockMarkets#为简化书写，将数据集重新命名为data
dim(data)#获取数据维度
head(data)#显示数据集前6条数据信息
co=decompose(data)
co=decompose(data)
co
View(data)
data1=data$CAC
data1=data.frame(data$CAC)
data=as.matrix(data)
data1=data$CAC
data=as.matrix(data)
data1=data$CAC
data=as.numeric(data)
data1=data$CAC
data(EuStockMarkets)#加载EuStockMarkets数据集
data=EuStockMarkets#为简化书写，将数据集重新命名为data
dim(data)#获取数据维度
head(data)#显示数据集前6条数据信息
data=as.data.frame(data)
data=as.data.frame(data)
data1=data$CAC
data1=as.ts(data1)
co=decompose(data)s
co=decompose(data1)
data(EuStockMarkets)#加载EuStockMarkets数据集
data=EuStockMarkets#为简化书写，将数据集重新命名为data
dim(data)#获取数据维度
head(data)#显示数据集前6条数据信息
data=as.data.frame(data)
data1=data$CAC
data1=data[1:900,]
data1=as.ts(data1)
co=decompose(data1)
data(EuStockMarkets)#加载EuStockMarkets数据集
data=EuStockMarkets#为简化书写，将数据集重新命名为data
dim(data)#获取数据维度
head(data)#显示数据集前6条数据信息
data=as.data.frame(data)
data1=data$CAC
data1=data[1:800,]
data1=as.ts(data1)
co=decompose(data1)
data(EuStockMarkets)#加载EuStockMarkets数据集
data=EuStockMarkets#为简化书写，将数据集重新命名为data
dim(data)#获取数据维度
head(data)#显示数据集前6条数据信息
data=as.data.frame(data)
data1=data$CAC
data1=data[1:800,]
data1=as.ts(data1)
plot.ts(data1)
View(data1)
data(EuStockMarkets)#加载EuStockMarkets数据集
data=EuStockMarkets#为简化书写，将数据集重新命名为data
dim(data)#获取数据维度
head(data)#显示数据集前6条数据信息
data=as.data.frame(data)
data1=data$CAC
data1=data1[1:800,]
data1=data1[,1:800]
data1=data1[1:800,]
data1=data1[1:800]
data1=as.ts(data1)
plot.ts(data1)
co=decompose(data1)
data(EuStockMarkets)#加载EuStockMarkets数据集
data=EuStockMarkets#为简化书写，将数据集重新命名为data
dim(data)#获取数据维度
head(data)#显示数据集前6条数据信息
```{r message=FALSE, warning=FALSE}
data=as.data.frame(data)
data1=data$CAC
data1=data1[1:600]
data1=as.ts(data1)
plot.ts(data1)
co=decompose(data1)
data(EuStockMarkets)#加载EuStockMarkets数据集
data=EuStockMarkets#为简化书写，将数据集重新命名为data
dim(data)#获取数据维度
head(data)#显示数据集前6条数据信息
data=as.data.frame(data)
data1=data$CAC
data1=data1[1:600]
data1=as.ts(data1)
plot.ts(data1)
co=stl(data1,s.widow="periodic")
co=stl(data1,s.window="periodic")
data(EuStockMarkets)#加载EuStockMarkets数据集
data=EuStockMarkets#为简化书写，将数据集重新命名为data
dim(data)#获取数据维度
head(data)#显示数据集前6条数据信息
data=as.data.frame(data)
data1=data$CAC
data1=data1[1560:1860]
data1=as.ts(data1)
plot.ts(data1)
co=decompose(data1)
data(EuStockMarkets)#加载EuStockMarkets数据集
data=EuStockMarkets#为简化书写，将数据集重新命名为data
dim(data)#获取数据维度
head(data)#显示数据集前6条数据信息
data=as.data.frame(data)#为提取变量方便，将时间序列数据转换为数据框类型
data1=data$CAC#提取CAC变量的值，并将其命名为新变量data1
data1=data1[1:620]#截取前620条数据
data1=as.ts(data1)#将数据转换为时间序列数据
plot.ts(data1)#绘制时间序列图
co=decompose(data1)
#install.packages(forecast)
#install.packages(fracdiff)
library(fracdiff)
library(forecast)
data1.pre=HoltWinters(data1,beta=FALSE,gamma=FALSE)
plot(data1,pre)
plot(data1.pre)
data1.pre$SSE
data.pre2=forecast.HoltWinters(data1.pre,h=100)
data.pre2=forecast(data1.pre,h=100)
data1.pre2=forecast(data1.pre,h=100)
plot.forecast(data1.pre2,col=2)
plot(data1.pre2,col=2)
install.packages(TTR)
data(EuStockMarkets)#加载EuStockMarkets数据集
data=EuStockMarkets#为简化书写，将数据集重新命名为data
dim(data)#获取数据维度
head(data)#显示数据集前6条数据信息
is.ts(data)
co=decompose(data)
plot(co)
data1=as.data.frame(data)
data1=data1$CAC
data1=as.ts(data1)
plot.ts(data1)
data1=as.ts(data1,start=c(1991,130),end=c(1998,260))
plot.ts(data1)
data1=ts(data1,start=c(1991,130),end=c(1998,260))
plot.ts(data1)
?EuStockMarkets
View(EuStockMarkets)
data(airmiles)
rm(list=ls())
data(airmiles)
data=airmiles
is.ts(data)
plot.ts(data)
rm(list=ls())
data("AirPassengers")
data=AirPassengers
is.ts(data)
plot.ts(data)
#可以看出数据具有明显的周期性和趋势性，用`decompose()`函数来估计时间序列的趋势、季节性和不规则部分
co=decompose(data)
options(dights=3)
plot(co)
library(forecast)
library(tseries)
adf.test(data)
library(TTR)
SMA.data=SMA(data,n=3)
plot(SMA.data)
par(mfrow=c(2,2))
plot(SMA.data,n=10)
plot(SMA.data,n=3,title="当n=3时的修匀效果")
plot(SMA.data,n=5,title="当n=3时的修匀效果")
plot(SMA.data,n=10,title="当n=3时的修匀效果")
plot(SMA.data,n=3,title="当n=3时的修匀效果")
plot(SMA.data,n=5,title="当n=3时的修匀效果")
plot(SMA.data,n=10,title="当n=3时的修匀效果")
plot(SMA.data,n=20,title="当n=3时的修匀效果")
#使用跨度为3的简单易懂平均法后，可以看到图像确实平滑了许多
#指数平滑法
#我们可以看到乘客数有一个比较固定的增长趋势，因此，可以用Holt两参数平滑法进行预测短期预测
library(forecast)
data.pre=HoltWinters(data,gamma=FALSE)
data.pre
#绘图对比Holt平滑对原始数据的预测效果
plot(data.pre)
#绘图对比Holt平滑对原始数据的预测效果
plot(data.pre,title="Holt平滑预测与原始数据对比图")
head(data)
#可以看出，原始数据和预测值趋势相似，差别不大，预测值似乎会早一步比原始数据出现。
#接下来用`forecast`包中的`forecast.HoltWinters()`函数来预测10年后
data.pre2=forecast(data,h=24)
library(fracdiff)
#可以看出，原始数据和预测值趋势相似，差别不大，预测值似乎会早一步比原始数据出现。
#接下来用`forecast`包中的`forecast.HoltWinters()`函数来预测10年后
data.pre2=forecast.HoltWinters(data,h=24)
#可以看出，原始数据和预测值趋势相似，差别不大，预测值似乎会早一步比原始数据出现。
#接下来用`forecast`包中的`forecast.HoltWinters()`函数来预测10年后
data.pre2=forecast(data,h=24)
plot(data.pre2)
#阴影部分显示预测结果，中间较粗的曲线是24个时点的乘客数的点估计值，深色阴影是置信水平为80%的预测区间，浅色阴影是90%的预测区间。
#有兴趣的同学可以查查1961-1962年间的真实数据，看看我们的预测结果跟真实情况有多大出入呢
data.diff=diff(data)
plot(data.diff)
par(mfrow=c(1,2))
acf(data.diff,lag.max = 10)
pacf(data.diff,lag.max=10)
data.diff2=diff(data.diff)
acf(data.diff2,lag.max = 10)
pacf(data.diff2,lag.max=10)
plot(data.diff)
#发现序列具有递增异方差
#消除异方差性，最常用的方法是对数变换
data1=log(data.diff2)
plot.ts(data1)
acf(data.diff,lag.max = 10)
pacf(data.diff,lag.max=10)
rm(list=ls())
#首先一看，非平稳，用非平稳时间序列分析的方法
#看看是否是平稳时间序列
library(forecast)
library(tseries)
adf.test(data)#p<0.05,说明数据不稳定，序列非平稳
#确定性分析
data("AirPassengers")
data=AirPassengers
is.ts(data)
plot.ts(data)
#可以看出数据具有明显的周期性和趋势性，用`decompose()`函数来估计时间序列的趋势、季节性和不规则部分
co=decompose(data)
options(dights=3)
plot(co)
#图中包含了4部分，从上到下分别是：原始的时间序列观测值；估计出的趋势部分；估计出的季节性部分；估计出的随机波动
#从这几张图中可以看得非常明显，整体呈现增长的趋势，其中，1954-1958年间增长迅速；周期性十分规则
#其实除了`decompose()`函数可以用于分解周期性时间序列外，还有`stl()`函数，呈现结果大同小异，大家可以试试
#移动平均
#用简单移动平均对序列修匀，减小随机波动的影响
library(TTR)
SMA.data=SMA(data,n=3)
plot(SMA.data,n=3,title="当n=3时的修匀效果")
#使用跨度为3的简单易懂平均法后，可以看到图像确实平滑了许多
#指数平滑法
#我们可以看到乘客数有一个比较固定的增长趋势，因此，可以用Holt两参数平滑法进行预测短期预测
library(forecast)
data.pre=HoltWinters(data,gamma=FALSE)
data.pre
#绘图对比Holt平滑对原始数据的预测效果
plot(data.pre)
#可以看出，原始数据和预测值趋势相似，差别不大，预测值似乎会早一步比原始数据出现。
#接下来用`forecast`包中的`forecast.HoltWinters()`函数来预测10年后
data.pre2=forecast(data,h=24)#两年，所以是24个月份
plot(data.pre2)
#阴影部分显示预测结果，中间较粗的曲线是24个时点的乘客数的点估计值，深色阴影是置信水平为80%的预测区间，浅色阴影是90%的预测区间。
#有兴趣的同学可以查查1961-1962年间的真实数据，看看我们的预测结果跟真实情况有多大出入呢
#ARIMA模型
#ARIMA模型是将非平稳序列化为平稳序列的操作，具体是通过差分的方法，ARIMA(p,d,q)中的d就是差分阶数
#现在我们对原序列做一阶差分看看结果
data.diff=diff(data)
plot(data.diff)
acf(data.diff,lag.max = 10)
data.diff2=diff(data.diff)
acf(data.diff2,lag.max = 10)
#现在我们画出序列自相关系数图和偏自相关系数图
par(mfrow=c(1,2)
acf(data.diff2,lag.max = 10)
pacf(data.diff2,lag.max = 10)
acf(data.diff2,lag.max = 10)
#可以看出，偏自相关系数明显截尾
auto.arima(data.diff2,ic="bic")
#可以看出，偏自相关系数明显截尾
auto.arima(data,ic="bic")
#可以看出，偏自相关系数明显截尾
auto.arima(data.diff,ic="bic")
acf(data.diff2,lag.max = 20)
pacf(data.diff2,lag.max = 20)
#可以看出，偏自相关系数明显截尾
auto.arima(data.diff2)
auto.arima()
?auto.arima
#可以看出，偏自相关系数明显截尾
auto.arima(data.diff2,ic="aic")
#ARIMA模型
#ARIMA模型是将非平稳序列化为平稳序列的操作，具体是通过差分的方法，ARIMA(p,d,q)中的d就是差分阶数
#现在我们对原序列做一阶差分看看结果
data1=log(data)
data1.diff=diff(data)
plot(data.diff1)
plot(data1.diff)
data1.diff=diff(data1)
plot(data1.diff)
acf(data1.diff,lag.max = 10)
data.diff2=diff(data1.diff)
acf(data.diff2,lag.max = 10)
#现在我们画出序列自相关系数图和偏自相关系数图
par(mfrow=c(1,2)
acf(data.diff2,lag.max = 20)
pacf(data.diff2,lag.max = 20)
acf(data.diff2,lag.max = 20)
#可以看出，偏自相关系数明显截尾
auto.arima(data.diff2,ic="aic")
rm(list=ls())
data("AirPassengers")
data(EuStockMarkets)#加载EuStockMarkets数据集
data=EuStockMarkets#为简化书写，将数据集重新命名为data
dim(data)#获取数据维度
head(data)#显示数据集前6条数据信息
rm(list=ls())
data("AirPassengers")
data=AirPassengers
head(data)
plot.ts(data)
co=decompose(data)
options(dights=3)#显示小数点后3位有效数字
plot(co)
?decompose
?stl
?TTR
#install.packages(TTR)
library(TTR)
SMA.data=SMA(data,n=3)
plot(SMA.data,n=3)
?forecast
#install.packages(TTR)
library(TTR)#加载软件包
SMA.data=SMA(data,n=3)#调用SMA函数
plot(SMA.data,n=3)#绘制时间序列图像
plot(data.pre)
#install.packages(TTR)
library(TTR)#加载软件包
SMA.data=SMA(data,n=3)#调用SMA函数
plot(SMA.data,n=3)#绘制时间序列图像
#install.packages(forecast)#下载forecast软件包
library(forecast)#加载软件包
data.pre=HoltWinters(data,gamma=FALSE)
data.pre#显示预测值
plot(data.pre)#绘图对比Holt平滑对原始数据的预测效果
plot(data.pre)
#install.packages(forecast)#下载forecast软件包
library(forecast)#加载软件包
data.pre=HoltWinters(data,gamma=FALSE)
data.pre#显示预测的各项结果
plot(data.pre)#绘图对比Holt平滑对原始数据的预测效果
data.pre2=forecast(data,h=24)#两年，所以是24个月份
plot(data.pre2)
?diff
data1.diff=diff(data)
data.diff=diff(data)
plot.ts(data.diff)
data1=log(data)#取对数
data1.diff=diff(data1)#一阶差分
plot(data1.diff)#绘制差分后时间序列图
acf(data1.diff,lag.max = 10)
data.diff2=diff(data1,lag=2)
acf(data.diff2,lag.max = 10)
data.diff2=diff(data1.diff)
acf(data.diff2,lag.max = 10)
auto.arima(data.diff2,ic="aic")
?auto.arima
data3=diff(data.diff2)
acf(data3,lag,max=10)
acf(data3,lag.max=10)
# data.diff2=diff(data1.diff)
# acf(data.diff2,lag.max = 10)
# data3=diff(data.diff2)
# acf(data3,lag.max=10)
par(frow=c(2,2))
data2=diff(data1,lag=2)
acf(data2,lag.max = 5)
data3=diff(data1,lag=3)
acf(data3,lag.max = 5)
data4=diff(data1,lag=4)
acf(data4,lag.max = 5)
data5=diff(data,lag=5)
acf(data5,lag.max = 5)
# data.diff2=diff(data1.diff)
# acf(data.diff2,lag.max = 10)
# data3=diff(data.diff2)
# acf(data3,lag.max=10)
par(frow=c(2,2))
data2=diff(data1,lag=2)
acf(data2,lag.max = 15)
data3=diff(data1,lag=3)
acf(data3,lag.max = 15)
data4=diff(data1,lag=4)
acf(data4,lag.max = 15)
data5=diff(data,lag=5)
acf(data5,lag.max = 15)
# data.diff2=diff(data1.diff)
# acf(data.diff2,lag.max = 10)
# data3=diff(data.diff2)
# acf(data3,lag.max=10)
par(frow=c(2,2))
data2=diff(data1,lag=2)
acf(data2,lag.max = 10)
data3=diff(data1,lag=3)
acf(data3,lag.max = 10)
data4=diff(data1,lag=4)
acf(data4,lag.max = 10)
data5=diff(data,lag=5)
acf(data5,lag.max = 10)
# data.diff2=diff(data1.diff)
# acf(data.diff2,lag.max = 10)
# data3=diff(data.diff2)
# acf(data3,lag.max=10)
data2=diff(data1,lag=2)
acf(data2,lag.max = 10)
data2=diff(data.diff)
acf(data2,lag.max = 10)
knitr::opts_chunk$set(echo = TRUE)
install.packages(WMDB)
install.packages(wMDB)
install.packages("wMDB")
install.packages("WMDB")
library(WMDB)
?wmd
data1<-read.csv("E:/BJintern/dcri-train.csv")
View(data1)
knitr::opts_chunk$set(echo = TRUE)
install.packages("klaR")
install.packages("klaR")
